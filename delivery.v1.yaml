openapi: 3.0.0
info:
  title: delivery
  version: '1.0'
  description: An API for food delivery application
servers:
  - url: 'http://localhost:5000'
paths:
  '/driver/{driver_id}/take_an_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: driver_id
        in: path
        required: true
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    put:
      summary: driver takes a new order
      tags:
        - driver
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: post-driver-take_an_order-driver_id-order_id
      description: A driver takes a new order. Add the new order to the driver's current order list.
  '/driver/{driver_id}/mark_a_completed_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: driver_id
        in: path
        required: true
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    put:
      summary: driver mark an order as completed
      tags:
        - driver
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: put-driver-mark_a_completed_order-driver_id-order_id
      description: 'A driver mark an order as completed, remove the order from the current order list and put it into complete order list'
  '/order/get_order_status/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    get:
      summary: get order status
      tags:
        - order
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderStatus:
                    type: string
                    description: |
                      status should be one of the following: PROCESSING, PREPARING, WAITING_FOR_DRIVER, PICKED_UP, DELIVERED, CANCELLED
                required:
                  - orderStatus
              examples: {}
      operationId: get-order-get_order_status-order_id
      description: To get the current status of an order
  '/order/{order_id}/get_order_est_deliver_time':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    get:
      summary: get order estimated deliver time
      tags:
        - order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  esitmatedDeliverTime:
                    type: integer
        '404':
          description: Not Found
      operationId: get-order-get_order_est_deliver_time-order_id
      description: Get the estimated deliver time of the order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                estimated_deliver_time:
                  type: string
        description: Estimated deliver time of an order
  '/restaurant/{restaurant_id}/set_order_status_preparing/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
    put:
      summary: restaurant set the status of an order to be PREPARING
      tags:
        - restaurant
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-restaurant-set_order_status-order_id
      description: 'A restaurant takes an order, and set the status of the order ot be PREPARING'
  '/driver/{driver_id}/set_order_status_picked_up/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
      - schema:
          type: string
        name: driver_id
        in: path
        required: true
    put:
      summary: driver set status for an order to be PICKED UP
      tags:
        - driver
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-driver-set_order_status_picked_up-order_id
      description: 'A driver picked up an order, and set the status of the order from WAITING_FOR_DRIVER to be PICKED UP'
  '/restaurant/{restaurant_id}/set_order_status_waiting/{order_id}':
    put:
      summary: restaurant set the status of an order to be WAITING_FOR_DRIVER
      tags:
        - restaurant
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-restaurant-set_order_status_waiting
      description: 'A restaurant finished the order, and set the order status from PREPARING to be WAITING_FOR_DRIVER'
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
      - schema:
          type: string
        name: order_id
        in: path
        required: true
  '/customer/{customer_id}/cancel_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    put:
      summary: customer cancel an order
      tags:
        - customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_reason:
                    type: string
                  order_id:
                    type: string
                  restaurant_name:
                    type: string
                required:
                  - error_reason
                  - order_id
                  - restaurant_name
              examples:
                example-1:
                  value:
                    error_reason: 'The restaurant has started preparing your order, your order cannot be cancelled'
                    order_id: f1695d1dd57602865f0e8141
                    restaurant_name: Little Chengdu
      operationId: put-customer-cancel_order-customer_id-order_id
      description: 'A customer choose to cancel an order. An order can only be cancelled when the status of the order is PROCESSING, otherwise the cancel operation will not be executed.'
  '/order/get_an_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    get:
      summary: get an order
      tags:
        - order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: string
                  create_time:
                    type: integer
                  restaurant_name:
                    type: string
                  driver:
                    type: object
                    properties:
                      first_name:
                        type: string
                      phone_number:
                        type: integer
                      car_maker:
                        type: string
                      car_model:
                        type: string
                  status:
                    type: string
                  estimated_deliver_time:
                    type: string
                  deliver_time:
                    type: string
                  cart:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            price:
                              type: number
                      tips:
                        type: number
                      total_price:
                        type: number
                  customer_name:
                    type: string
        '404':
          description: Not Found
      operationId: get-order-get_an_order-order_id
      description: 'Get all the information about a certain order. '
  '/order/get_orders/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    get:
      summary: get all orders of a user
      tags:
        - order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        create_time:
                          type: integer
                        customer_name:
                          type: string
                        restaurant_name:
                          type: string
                        driver:
                          type: object
                          properties:
                            first_name:
                              type: string
                            phone_number:
                              type: string
                            car_maker:
                              type: string
                            car_model:
                              type: string
                        status:
                          type: string
                        estimated_delivery_time:
                          type: string
                        cart:
                          type: object
                          properties:
                            items:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  price:
                                    type: number
                            tips:
                              type: number
                            total_price:
                              type: number
        '404':
          description: Not Found
      operationId: get-order-get_orders-user_id
      description: 'Get all orders of a user. May be called by customers, restaurants, '
  '/order/update_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    put:
      summary: update order
      tags:
        - order
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-order-update_order?-order_id
      description: Update an order
  '/order/delete_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    delete:
      summary: delete an order
      tags:
        - order
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: delete-order-delete_order-order_id
      description: Delete an order
  '/customer/{customer_id}/make_order/{restaurant_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
    post:
      summary: customer make an order to a restaurant
      tags:
        - customer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
      operationId: post-customer-make_order-customer_id-customer_id-restaurant_id-restaurant_id
      description: Customer make an order to a restaurant
  '/driver/update_a_driver/{driver_id}':
    parameters:
      - schema:
          type: string
        name: driver_id
        in: path
        required: true
    put:
      summary: update driver information
      tags:
        - driver
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: put-driver-update_a_driver-driver_id
      description: Update a driver's information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                phone_number:
                  type: string
                car_maker:
                  type: string
                car_model:
                  type: string
                car_licence:
                  type: string
                id:
                  type: string
        description: 'Body includes all the information entries could be updated. '
  /customer/add_customer:
    parameters: []
    post:
      summary: add a customer
      tags:
        - customer
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request. Customer already exist.
        '403':
          description: Forbidden
      operationId: post-customer-add_customer-customer_id
      description: Add a customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account_name:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                phone_number:
                  type: string
                address_list:
                  type: array
                  items:
                    type: object
                    properties:
                      address1:
                        type: string
                      address2:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      zip:
                        type: string
                credit_card_list:
                  type: array
                  items:
                    type: object
                    properties:
                      card_number:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      security_code:
                        type: string
                      billing_adress:
                        type: string
                      exp_time:
                        type: string
        description: Information for a customer.
  '/customer/{customer_id}/update_customer':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    put:
      summary: update a customer
      tags:
        - customer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
      operationId: put-customer-update_customer-customer_id
      description: Update a customer information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account_name:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                phone_number:
                  type: string
                address_list:
                  type: array
                  items:
                    type: object
                    properties:
                      address1:
                        type: string
                      address2:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      zip:
                        type: string
                credit_card_list:
                  type: array
                  items:
                    type: object
                    properties:
                      card_number:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      security_code:
                        type: string
                      exp_date:
                        type: string
                      billing_address:
                        type: string
        description: Customer information
  '/customer/{customer_id}/delete_customer':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    delete:
      summary: delete a customer
      tags:
        - customer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
      operationId: delete-cusotmer-delete_a_customer-customer_id
      description: Delete a customer
  '/customer/{customer_id}/add_address':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    put:
      summary: add an address
      operationId: put-customer-add_address-customer_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      description: Add a new address to a customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: object
                  properties:
                    address1:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zip:
                      type: string
        description: Information needed for an Address
      tags:
        - customer
  '/customer/{customer_id}/update_address/{address_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: address_id
        in: path
        required: true
    put:
      summary: update address
      tags:
        - customer
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-customer-update_address-customer_id
      description: Update address for customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: object
                  properties:
                    address1:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zip:
                      type: string
  '/customer/{customer_id}/delete_address/{address_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: address_id
        in: path
        required: true
    delete:
      summary: delete address
      tags:
        - customer
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: delete-customer-delete_address-customer_id-address_id
      description: Customer delete an address
  '/customer/{customer_id}/add_card':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    put:
      summary: add credit card
      operationId: put-customer-add_credit_card-customer_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      description: Add a new credit card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                creditCard:
                  type: object
                  properties:
                    cardNumber:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    securityCode:
                      type: string
                    expDate:
                      type: string
                    billingAddress:
                      type: object
                      properties:
                        address1:
                          type: string
                        address2:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        zip:
                          type: string
        description: Information needed for a CreditCard
      tags:
        - customer
  '/customer/{customer_id}/update_card/{card_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: card_id
        in: path
        required: true
    put:
      summary: update credit card information
      tags:
        - customer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
      operationId: put-customer-update_credit_card-customer_id
      description: Update credit card information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credit_card:
                  type: object
                  properties:
                    card_number:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    security_code:
                      type: string
                    exp_time:
                      type: string
                    billing_addresss:
                      type: object
                      properties:
                        address1:
                          type: string
                        address2:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        zip:
                          type: string
        description: New information of the credit card
  '/customer/{customer_id}/delete_card/{card_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: card_id
        in: path
        required: true
    delete:
      summary: delete a credit card
      tags:
        - customer
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: delete-customer-delete_credit_card-customer_id
      description: Delete a credit card
      parameters: []
  '/dish/get_dish/{dish_id}':
    parameters:
      - schema:
          type: string
        name: dish_id
        in: path
        required: true
    get:
      summary: get a dish
      tags:
        - dish
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  picture:
                    type: string
                  price:
                    type: number
                  rating:
                    type: number
      operationId: get-dish-get_dish-dish_id
      description: Get a dish
  '/customer/{customer_id}/add_dish/{dish_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: dish_id
        in: path
        required: true
    put:
      summary: add a dish to customer cart
      tags:
        - customer
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-customer-add_a_dish_to_cart-customer_id-dish_id
      description: Customer add a dish to their cart
  '/restaurant/{restaurant_id}/add_a_dish/{dish_id}':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
      - schema:
          type: string
        name: dish_id
        in: path
        required: true
    put:
      summary: add a dish to a restaurant
      tags:
        - restaurant
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: put-restaurant-add_a_dish-restaurant_id-dish_id
      description: Add a dish to a restaurant
  '/customer/{customer_id}/remove_dish/{dish_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
      - schema:
          type: string
        name: dish_id
        in: path
        required: true
    put:
      summary: remove a dish from cart
      operationId: put-customer-customer_id-delete_a_dish-dish_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      description: Remove a dish from a customer's cart
      tags:
        - customer
  /restaurant/get_all_restaurants:
    get:
      summary: get all restaurants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    RestaurantName:
                      type: string
      operationId: get-restaurant-get_all_restaurants
      description: Get all restaurants in the database
      tags:
        - restaurant
    parameters: []
  '/restaurant/{restaurant_id}/get_menu':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
    get:
      summary: get menu of the restaurant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples: {}
      operationId: get-restaurant-restaurantId-get_menu
      description: Get menu of a specific restaurant
      tags:
        - restaurant
  '/restaurant/{restaurant_id}':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
    get:
      summary: get a restaurant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  RestaurantName:
                    type: string
        '400':
          description: Bad Request
      operationId: get-customer-get_a_restaurant-restaurant_id
      description: get a restaurant with restaurant Id
      tags:
        - restaurant
  '/customer/{customer_id}/get_cart':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    get:
      summary: customer gets a cart
      tags:
        - customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found
      operationId: get-customer-get_cart-cart_id
      description: get a cart object from a customer
  '/customer/{customer_id}/set_tip':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    put:
      summary: customer sets tip
      operationId: put-customer-customer_id-set_tip
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      description: customer sets the tip
      requestBody:
        content:
          application/json:
            schema:
              type: number
        description: tip amount
      tags:
        - customer
  '/customer/{customer_id}/empty_cart':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    put:
      summary: customer empty a cart
      operationId: put-customer-empty_cart-customer_id
      responses:
        '200':
          description: OK
      description: Customer wants to empty the current cart
      tags:
        - customer
  '/restaurant/update_restaurant/{restaurant_id}':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
    put:
      summary: update a restaurant
      operationId: put-restaurant-update_restaurant-restaurant_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      tags:
        - restaurant
      description: Restaurant wants to update its info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_address:
                  type: string
                name:
                  type: string
                address:
                  type: object
                  properties:
                    address1:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zip:
                      type: string
                phone:
                  type: string
                start_time:
                  type: number
                end_time:
                  type: string
                cuisine:
                  type: string
                menu:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      pricture:
                        type: string
                      rating:
                        type: number
        description: Information needed for updating a restaurant
  '/restaurant/{restaurant_id}/finish_order/{order_id}':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    post:
      summary: restaurant finishes order
      operationId: post-restaurant-finish_order-restaurant_id-order_id
      responses:
        '200':
          description: OK
      description: Restaurant wants to finish an order
      tags:
        - restaurant
  '/restaurant/{restaurant_id}/delete_a_dish/{dish_id}':
    parameters:
      - schema:
          type: string
        name: restaurant_id
        in: path
        required: true
      - schema:
          type: string
        name: dish_id
        in: path
        required: true
    delete:
      summary: delete a dish from the dishes provided by restaurant
      tags:
        - restaurant
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: delete-restaurant-delete_a_dish-restaurant_id-dish_id
      description: Delete a dish provided by a restaurant
  /driver/add_new_driver:
    post:
      summary: add a new driver
      tags:
        - driver
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: post-driver-add_new_driver
      description: Add new driver
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                driver_id:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                phone_number:
                  type: string
                car_maker:
                  type: string
                car_model:
                  type: string
                car_license:
                  type: string
        description: Information about the new driver
  '/driver/delete_a_driver/{driver_id}':
    parameters:
      - schema:
          type: string
        name: driver_id
        in: path
        required: true
    delete:
      summary: delete a driver
      tags:
        - driver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '404':
          description: Not Found
      operationId: delete-driver-delete_a_driver-driver_id
      description: Delete a driver
  '/customer/{customer_id}':
    parameters:
      - schema:
          type: string
        name: customer_id
        in: path
        required: true
    get:
      summary: get a customer
      tags:
        - customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ObjectId:
                    type: string
                  accountName:
                    type: string
                  passWrod:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  orderHistory:
                    type: array
                    items:
                      type: string
                  cart:
                    type: object
                  addressList:
                    type: array
                    items:
                      type: object
                  creditCards:
                    type: array
                    items:
                      type: object
              examples: {}
      operationId: get-customer-customer_id
      description: Get customer information
components:
  schemas: {}
  securitySchemes:
    API Key - 1:
      type: http
      scheme: basic
tags:
  - name: driver
  - name: restaurant
  - name: customer
  - name: order
  - name: dish
